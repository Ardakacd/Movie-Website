// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using data.Concrete;

namespace data.Migrations
{
    [DbContext(typeof(ShopContext))]
    [Migration("20210711090122_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.7");

            modelBuilder.Entity("entity.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .HasColumnType("text");

                    b.HasKey("CategoryId");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("entity.CategoryMovie", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("catmov");
                });

            modelBuilder.Entity("entity.Director", b =>
                {
                    b.Property<int>("DirectorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime");

                    b.Property<double>("Imdb")
                        .HasColumnType("double");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("text");

                    b.HasKey("DirectorId");

                    b.ToTable("directors");
                });

            modelBuilder.Entity("entity.Movie", b =>
                {
                    b.Property<int>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("DirectorId")
                        .HasColumnType("int");

                    b.Property<double>("Imdb")
                        .HasColumnType("double");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("text");

                    b.Property<DateTime>("ReleaseTime")
                        .HasColumnType("datetime");

                    b.HasKey("MovieId");

                    b.HasIndex("DirectorId");

                    b.ToTable("movies");
                });

            modelBuilder.Entity("entity.MoviePlayer", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("movplay");
                });

            modelBuilder.Entity("entity.Player", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime");

                    b.Property<double>("Imdb")
                        .HasColumnType("double");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("text");

                    b.HasKey("PlayerId");

                    b.ToTable("players");
                });

            modelBuilder.Entity("entity.CategoryMovie", b =>
                {
                    b.HasOne("entity.Category", "category")
                        .WithMany("movies")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("entity.Movie", "movie")
                        .WithMany("categories")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("category");

                    b.Navigation("movie");
                });

            modelBuilder.Entity("entity.Movie", b =>
                {
                    b.HasOne("entity.Director", "director")
                        .WithMany("movies")
                        .HasForeignKey("DirectorId");

                    b.Navigation("director");
                });

            modelBuilder.Entity("entity.MoviePlayer", b =>
                {
                    b.HasOne("entity.Movie", "movie")
                        .WithMany("players")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("entity.Player", "player")
                        .WithMany("movies")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("movie");

                    b.Navigation("player");
                });

            modelBuilder.Entity("entity.Category", b =>
                {
                    b.Navigation("movies");
                });

            modelBuilder.Entity("entity.Director", b =>
                {
                    b.Navigation("movies");
                });

            modelBuilder.Entity("entity.Movie", b =>
                {
                    b.Navigation("categories");

                    b.Navigation("players");
                });

            modelBuilder.Entity("entity.Player", b =>
                {
                    b.Navigation("movies");
                });
#pragma warning restore 612, 618
        }
    }
}
